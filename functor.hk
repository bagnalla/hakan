
# The identity function
pure id : a → a
def id = λx. x

pure flip : (a → b → c) → b → a → c
def flip = λf. λx. λy. f y x

# Function composition.
pure compose : (b → c) → (a → b) → a → c
def compose = λf. λg. λx. f (g x)

pure postcompose : (a → b) → (b → c) → a → c
def postcompose = flip compose

data Pair a b =
  | Pair a b

# Maybe change the data syntax to this:
# data Pair a b
# | Pair a b

pure proj1 : a × b → a
def proj1 = λp.
  destruct p as
  | (x, _) → x

pure proj2 : a × b → b
def proj2 = λp.
  destruct p as
  | (_, y) → y

# Thinking of changing the destruct syntax to this. Change 'destruct' to
# 'case' just because it's shorter, and get rid of other keyword entirely.
-- def proj2 = λp.
--   case p
--   | (_, y) → y

# This should also be allowed (similar to 'function' in OCaml).
-- def proj2 = case
--   | (_, y) → y

# As well as this when you only want to match one case. For now we don't
# support multiple equations for a single function though (like Haskell
# does) for multiple cases we use the syntax shown above.
-- def proj2 (_, y) = y

# Here we can get rid of the 'where' keyword.
class Functor f
  | fmap : (a → b) → f a → f b

class Bifunctor f
  | bimap : (a → c) → (b → d) → f a b → f c d

class Profunctor f
  | dimap : (c → a) → (b → d) → f a b → f c d

instance Bifunctor Pair
  | bimap = λf. λg. λp.
    destruct p as
    | (x, y) → (f x, g y)

data Reader a b =
  | Reader (a → b)

pure runReader : Reader a b → a → b
def runReader = λr. destruct r as | Reader f → f

instance Profunctor Reader
  | dimap = λf. λg. λh. Reader (g ∘ runReader h ∘ f)

pure first : (a → c) → a × b → c × b
def first = flip bimap id
-- def first = λf. λp. destruct p as
--   | (x, y) → (f x, y)
-- def first = λf. bimap f id

-- run first id (0, 0)

-- pure f : Int × Int → Int × Int
-- -- def f = bimap id id
-- def f = bimap (λx. x + 2) (λx. x + 1)
-- run f (0, 0)

pure second : (b → c) → a × b → a × c
def second = bimap id

-- -- instance Functor (Pair a) where
-- --   | fmap = λf. λp. (p₁, f p₂)

-- instance Functor (Pair a) where
--   | fmap = second

-- def p = (⊤, 0)

data StateT s m a =
  | StateT (s → m (a × s))

# Temporary until we have general bifunctors.
-- pure bimap : (a → c) → (b → d) → a × b → c × d
-- def bimap = λf. λg. λp.
--   destruct p as
--   | (x, y) → (f x, g y)

-- pure first : (a → c) → a × b → c × b
-- def first = λf. bimap f (λx. x)

-- pure second : (b → c) → a × b → a × c
-- def second = bimap (λx. x)

-- pure second : (b → c) → a × b → a × c
-- def second = λf. λp.
--   destruct p as
--   | (x, y) → (x, f y)

data Identity a =
  | Identity a

pure runIdentity : Identity a → a
def runIdentity = λx. destruct x as
  | Identity y → y

pure runStateT : StateT s m a → s → m (a × s)
def runStateT = λm. λs. destruct m as
  | StateT f → f s

pure runState : StateT s Identity a → s → (a × s)
-- def runState = λm. λs. runIdentity (runStateT m s)
def runState = (compose runIdentity) ∘ runStateT

instance Functor m => Functor (StateT s m)
-- instance Functor (StateT s m) where
  | fmap = λf. λa. StateT (λs. fmap (first f) (runStateT a s))
  -- | fmap = λf. λa. destruct a as
  --   | StateT g → StateT (λs. fmap (first f) (g s))

-- data List a =
--   | Nil
--   | Cons a (List a)

-- pure map : (a → b) → [a] → [b]
-- def map = λf. λl.
--   destruct l as
--   | Nil → Nil
--   | Cons x l' → Cons (f x) (map f l')

-- -- TODO: Check that the kind of the type index is correct. The
-- -- following causes an error because it isn't checked.
-- -- instance Functor (List a) where
-- instance Functor List where
--   | fmap = map

-- def l = Cons 0 (Cons 1 (Cons 2 Nil))

-- run fmap (λx. x + 1) l


instance Functor Identity
  -- | fmap = λf. λx. destruct x as
  --     | Identity y -> Identity (f y)
  -- | fmap = λf. λx. Identity (f (runIdentity x))
  | fmap = λf. Identity ∘ f ∘ runIdentity
  -- | fmap = postcompose runIdentity ∘ compose Identity

-- -- pure runState : StateT s Identity a → s → (s × a)
-- -- def runState = λm. λs. destruct m as
-- --   | StateT f -> destruct f s as
-- --     | Identity x -> x

-- pure runStateT : StateT s m a → s → m (s × a)
-- def runStateT = λm. λs. destruct m as
--   | StateT f → f s

-- pure runState : StateT s Identity a → s → (s × a)
-- -- def runState = λm. λs. destruct m as
-- --   | StateT f → runIdentity (f s)
-- def runState = (postcompose runIdentity) ∘ runStateT
-- -- def runState = λm. λs. runIdentity (runStateT m s)


pure comp : StateT Int Identity Int
def comp = StateT (λx. Identity (0, x))

-- -- def asdf = fmap (λx. x + 1) (runState m 123)

-- -- run asdf

-- -- pure asdf : StateT Int Identity Int
-- -- def asdf = fmap (λx. x + 1) m


-- -- run asdf

-- run fmap (λx. x + 1) comp

-- -- run destruct fmap (λx. x + 1) comp as
-- --   | StateT g -> g 0

-- -- run π₂ (runIdentity (runStateT (fmap (λx. x + 1) comp) 0))
-- run π₂ (runState (fmap (λx. x + 1) comp) 0)
run runState (fmap (λx. x + 1) comp) 123
-- # ==>
