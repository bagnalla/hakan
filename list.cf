
data Option a =
  | None
  | Some a

data List a =
  | Nil
  | Cons a (List a)

val isnil : [a] → Bool
let isnil = λ l.
  destruct l as
  | Nil → ⊤
  | _   → ⊥

〚 isnil (Cons 0 Nil) 〛

val head : [a] → a?
let head = λ l.
  destruct l as
  | Nil      → None
  | Cons x _ → Some x

val tail : [a] → [a]
let tail = λ l.
  destruct l as 
  | Nil       → Nil
  | Cons _ l' → l'

val app : [a] → [a] → [a]
letrec app = λ l1. λ l2.
  destruct l1 as 
  | Nil → l2
  | Cons x l1' → Cons x (app l1' l2)

val concat : [[a]] → [a]
letrec concat = λ l.
  destruct l as
  | Nil → Nil
  | Cons x l' → app x (concat l')

val length : [a] → ℤ
letrec length = λl.
  destruct l as
  | Nil       → 1
  | Cons _ l' → 1 + length l'

val rev : [a] → [a]
letrec rev = λ l.
  destruct l as
  | Nil → Nil
  | Cons x l' → app (rev l') (Cons x Nil)

val range : ℤ → [ℤ]
letrec range = λn.
  if n <= 0 then Nil else Cons (n-1) (range (n-1))

val map : (a → b) → [a] → [b]
letrec map = λ f. λ l.
  destruct l as
  | Nil → Nil
  | Cons x l' → Cons (f x) (map f l')


val l : [ℤ]
let l = tail (range 10)

〚 head l 〛

〚 map (λ x. x + 1) l 〛
