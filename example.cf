∃ prelude

# \Bbb{Z}

val towardzero : ℤ → ℤ
letrec towardzero = λn.
  if n > 0 then n - 1 else
  if n < 0 then n + 1 else
  0

val even : ℤ → Bool
letrec even = λn. if n = 0 then ⊤ else ¬ even (towardzero n)

val odd : ℤ → Bool
let odd = λx. ¬ even x

let intToBool = λx. if x = 0 then ⊥ else ⊤

let x1 = inl 0 : ℤ + Bool
let x2 = inr ⊥ : ℤ + Bool

val x3 : ℤ + Bool -> Bool
let x3 = case x1 of
     | inl x → intToBool x
     | inr y → y

let counter = ref -1

val dontimes : (Unit → Unit) → ℤ → Unit
letrec dontimes = λf. λn.
  if n = 0 then tt else
  (f tt; dontimes f (n - 1))

val incn : ℤ → Unit
let incn = μ (λg. λn.
             if n = 0 then tt else
	       (counter ← !counter + 1; g (n - 1)))

〚 dontimes (\_. counter ← !counter + 1) 10 〛
〚 incn 10 〛

〚 counter ← !counter + 1 〛
〚 counter ← !counter + 1 〛

val triangle : ℤ → ℤ
letrec triangle = λn. if n = 0 then 0 else n + triangle (n - 1)

〚 dontimes (λ_. counter ← !counter + 1)
            (let x = 5 in triangle (100 + x));
   seq (!counter);
   fact 10 〛


let f = λx. x + 5
let g = λx. x * 2
val h : ℤ × ℤ → ℤ × ℤ
let h = ⟨f ∘ π₁, g ∘ π₂⟩
〚 h (1, 2) 〛# ==> (6, 4)

# 〚 (λx. f (π₁ x)) x 〛
# 〚 (f ∘ π₁) x 〛
# 〚 let comp = (λf. λg. λx. g (f x)) in comp π₁ f x 〛
# 〚 compose f π₁ 〛


# There was a bug in the typechecker. It let the following program
# through which led to a runtime error.
# val f : ℤ → Bool
# let f = λx:Int. if x = 0 then ⊥ else ⊤
# val g : Bool → Unit
# let g = λx:Bool. tt
# 〚 (λf. λg. λx. g (f x)) g f 0 〛
# 〚 let asdf = compose g f 0 in asdf 〛
