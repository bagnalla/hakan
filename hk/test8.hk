
-- data Option a =
--   | None
--   | Some a

-- 〚 Some 〛

-- data Test a =
--   | Test (Ref a)

-- pure f : TestClass a => a -> a
-- def f = \x. x


data Pair a b =
  | Pair a b

pure proj1 : a × b → a
def proj1 = λ p.
  destruct p as
  | (x, _) → x

pure proj2 : a × b → b
def proj2 = λ p.
  destruct p as
  | (_, y) → y


class Eq a where
  | eq : a -> a -> Bool

class Eq a => TestClass a where
  | foo : a -> Bool
  | bar : a -> Int

-- pure f : TestClass a => a -> Int
-- def f = bar

pure g : Eq a => a -> a -> Bool
def g = eq

-- pure f : TestClass a => a -> Bool
-- def f = foo

instance Eq Int where
  | eq = λx. λy. x = y

instance Eq Bool where
  | eq = λx. λy.
      destruct (x, y) as
      | (⊤, ⊤) → ⊤
      | (⊥, ⊥) → ⊤
      | _       → ⊥

run g ⊤ ⊥


-- pure h : Eq a => a -> a -> Int
-- def h = λx. λy. if eq x y then 1 else 0

-- run (h 456457 45645, (h ⊥ ⊤, h ⊤ ⊤))


instance TestClass Int where
  | bar = λx. x
  | foo = λx. if eq x 0 then ⊥ else ⊤

instance TestClass Bool where
  | foo = λx. ¬ x
  | bar = λx. if x then 123 else 66

-- pure k : TestClass a => a -> Int
-- def k = bar

-- pure asdf : Int
-- def asdf = k 0

-- run asdf

-- pure k2 : TestClass a => a -> Bool
-- def k2 = foo

-- run bar 0

-- pure asdf2 : Bool
-- def asdf2 = k2 1

-- run asdf2

-- run (muh 0, asdf2)


pure f1 : TestClass a => a -> Int × Bool
def f1 = λx. (bar x, foo x)

run f1 ⊥

