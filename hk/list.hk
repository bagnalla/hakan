
data Option a =
  | None
  | Some a

data List a =
  | Nil
  | Cons a (List a)

pure isnil : [a] → Bool
def isnil = λ l.
  destruct l as
  | Nil → ⊤
  | _   → ⊥

〚 isnil (Cons 0 Nil) 〛

pure head : [a] → a?
def head = λ l.
  destruct l as
  | Nil      → None
  | Cons x _ → Some x

pure tail : [a] → [a]
def tail = λ l.
  destruct l as 
  | Nil       → Nil
  | Cons _ l' → l'

pure app : [a] → [a] → [a]
def app = λ l1. λ l2.
  destruct l1 as 
  | Nil → l2
  | Cons x l1' → Cons x (app l1' l2)

pure concat : [[a]] → [a]
def concat = λ l.
  destruct l as
  | Nil → Nil
  | Cons x l' → app x (concat l')

pure length : [a] → ℤ
def length = λl.
  destruct l as
  | Nil       → 0
  | Cons _ l' → 1 + length l'

pure rev : [a] → [a]
def rev = λ l.
  destruct l as
  | Nil → Nil
  | Cons x l' → app (rev l') (Cons x Nil)

pure range : ℤ → [ℤ]
def range = λn.
  if n <= 0 then Nil else Cons (n-1) (range (n-1))

pure map : (a → b) → [a] → [b]
def map = λ f. λ l.
  destruct l as
  | Nil → Nil
  | Cons x l' → Cons (f x) (map f l')

pure sum : [ℤ] → ℤ
def sum = λl.
  destruct l as
  | Nil → 0
  | Cons x l' → x + sum l'

pure l : [ℤ]
def l = tail (range 10)

-- 〚 head l 〛

-- 〚 map (λ x. x + 1) l 〛

-- [| map (λ x. x + 1) l |]

pure l2 : [ℤ]
def l2 = map (λ x. x + 1) l

run sum l2
