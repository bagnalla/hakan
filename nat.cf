
# Peano encoding of natural numbers.
data Nat =
  | Zero
  | Succ Nat

val pred : Nat → Nat
let pred = λ n.
  destruct n as 
  | Zero → Zero
  | Succ n' → n'

val iszero : Nat → Bool
let iszero = λ n.
  destruct n as
  | Zero → ⊤
  | Succ _ → ⊥

val equal : Nat → Nat → Bool
letrec equal = λ n. λ m.
  if iszero n then iszero m else
  ¬ iszero m && equal (pred n) (pred m)

val le : Nat → Nat → Bool
letrec le = λ n. λ m.
  if iszero n then ⊤ else
  le (pred n) (pred m)

val lt : Nat → Nat → Bool
let lt = λ n. λ m. le n m && ¬ equal n m

val ge : Nat → Nat → Bool
let ge = λ n. λ m. ¬ le n m

val gt : Nat → Nat → Bool
let gt = λ n. λ m. ¬ lt n m

val plus : Nat → Nat → Nat
letrec plus = λ n. λ m.
  destruct n as 
  | Zero → m
  | Succ n' → Succ (plus n' m)

val mult : Nat → Nat → Nat
letrec mult = λ n. λ m.
  destruct n as 
  | Zero → Zero
  | Succ n' → plus (mult n' m) m

# val div : Nat → Nat → Nat
# let div = λ n. λ m.

# pow

# fact  

val natOfInt : ℤ → Nat
letrec natOfInt = λ i.
  if i <= 0 then Zero else Succ (natOfInt (i-1))

val intOfNat : Nat → ℤ
letrec intOfNat = λ n.
  destruct n as
  | Zero → 0
  | Succ n' → 1 + intOfNat n'

〚 intOfNat (plus (natOfInt 113) (natOfInt 150)) 〛
〚 intOfNat (mult (natOfInt 11) (natOfInt 50)) 〛
