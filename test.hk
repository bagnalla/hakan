
pure id : a → a
def id = λx. x

pure flip : (a → b → c) → b → a → c
def flip = λf. λx. λy. f y x

class f ∈ Bifunctor
  | bimap : (a → c) → (b → d) → f a b → f c d

pure first : f ∈ Bifunctor => (a -> c) -> f a b -> f c b
def first = flip bimap id

data Pair a b =
  | Pair a b

instance Pair ∈ Bifunctor
  | bimap = λf. λg. λp.
    destruct p as
    | (x, y) → (f x, g y)


-- pure f : (a -> c) -> a × b -> c × b
def f = bimap id

-- def first = λf. λp. destruct p as
--                     | (x, y) -> (f x, y)


-- pure g : a -> Int × Int
-- def g = λx. first id (0, 0)

-- run bimap id id (0, 0)
run f id (0, 0)



-- run first id (0, 0)
-- run f id (0, 0)

-- run first id (first id (0, 0), ⊥)
